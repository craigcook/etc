/* line 6, static_build/css/pebbles/base/elements/_reset.scss */
article, aside, details, figcaption, figure, footer, header,
hgroup, main, nav, section, summary {
  display: block; }

/* line 11, static_build/css/pebbles/base/elements/_reset.scss */
audio, video, canvas {
  display: inline-block; }

/* line 15, static_build/css/pebbles/base/elements/_reset.scss */
html, body, form, fieldset, legend,
h1, h2, h3, h4, h5, h6, hr,
p, pre, blockquote, figure, figcaption,
table, ul, ol, li, dl, dt, dd {
  margin: 0;
  padding: 0; }

/* line 23, static_build/css/pebbles/base/elements/_reset.scss */
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: ''; }

/* line 30, static_build/css/pebbles/base/elements/_reset.scss */
blockquote, q {
  quotes: '' ''; }

/* line 34, static_build/css/pebbles/base/elements/_reset.scss */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* line 39, static_build/css/pebbles/base/elements/_reset.scss */
fieldset, iframe, a img {
  border: 0; }

/* line 43, static_build/css/pebbles/base/elements/_reset.scss */
input, select, textarea {
  font-family: inherit;
  font-size: 100%; }

/* line 48, static_build/css/pebbles/base/elements/_reset.scss */
img, video, object, embed {
  -ms-interpolation-mode: bicubic;
  height: auto;
  max-width: 100%; }

/* line 8, static_build/css/pebbles/base/elements/_document.scss */
html {
  font-size: 112.5%;
  background: #fff; }

/* line 13, static_build/css/pebbles/base/elements/_document.scss */
body {
  font-size: 18px;
  font-size: 1rem;
  background: #fff;
  color: #000;
  font-family: "Zilla Slab", "Open Sans", X-LocaleSpecific, sans-serif;
  line-height: 1.5; }

/* line 22, static_build/css/pebbles/base/elements/_document.scss */
#strings {
  display: none; }

/* line 27, static_build/css/pebbles/base/elements/_document.scss */
.hidden {
  display: none; }

/* line 8, static_build/css/pebbles/base/elements/_typography.scss */
h1, h2, h3, h4, h5, h6, legend {
  font-weight: bold;
  line-height: 1.1;
  margin: 0 0 .25em; }

/* line 15, static_build/css/pebbles/base/elements/_typography.scss */
h1 {
  font-size: 36px;
  font-size: 2rem; }
  @media screen and (min-width: 760px) {
    /* line 15, static_build/css/pebbles/base/elements/_typography.scss */
    h1 {
      font-size: 48px;
      font-size: 2.66667rem; } }
  @media screen and (min-width: 1000px) {
    /* line 15, static_build/css/pebbles/base/elements/_typography.scss */
    h1 {
      font-size: 60px;
      font-size: 3.33333rem; } }

/* line 19, static_build/css/pebbles/base/elements/_typography.scss */
h2 {
  font-size: 24px;
  font-size: 1.33333rem; }
  @media screen and (min-width: 760px) {
    /* line 19, static_build/css/pebbles/base/elements/_typography.scss */
    h2 {
      font-size: 36px;
      font-size: 2rem; } }
  @media screen and (min-width: 1000px) {
    /* line 19, static_build/css/pebbles/base/elements/_typography.scss */
    h2 {
      font-size: 48px;
      font-size: 2.66667rem; } }

/* line 23, static_build/css/pebbles/base/elements/_typography.scss */
h3 {
  font-size: 18px;
  font-size: 1rem; }
  @media screen and (min-width: 760px) {
    /* line 23, static_build/css/pebbles/base/elements/_typography.scss */
    h3 {
      font-size: 24px;
      font-size: 1.33333rem; } }
  @media screen and (min-width: 1000px) {
    /* line 23, static_build/css/pebbles/base/elements/_typography.scss */
    h3 {
      font-size: 36px;
      font-size: 2rem; } }

/* line 27, static_build/css/pebbles/base/elements/_typography.scss */
h4 {
  font-size: 18px;
  font-size: 1rem; }
  @media screen and (min-width: 1000px) {
    /* line 27, static_build/css/pebbles/base/elements/_typography.scss */
    h4 {
      font-size: 24px;
      font-size: 1.33333rem; } }

/* line 31, static_build/css/pebbles/base/elements/_typography.scss */
h5, h6 {
  font-size: 16px;
  font-size: 0.88889rem; }

/* line 35, static_build/css/pebbles/base/elements/_typography.scss */
p,
ul,
ol,
dl,
table {
  margin-bottom: 1.25em; }

/* line 8, static_build/css/pebbles/base/elements/_links.scss */
a {
  color: #00a7e0;
  text-decoration: underline; }
  /* line 12, static_build/css/pebbles/base/elements/_links.scss */
  a:hover, a:focus, a:active, a:visited:hover, a:visited:focus, a:visited:active {
    color: #0081ad;
    text-decoration: underline; }
  /* line 22, static_build/css/pebbles/base/elements/_links.scss */
  a:visited {
    color: #75bad1; }

/* line 11, static_build/css/pebbles/base/elements/_lists.scss */
ul, ol {
  list-style: none; }

/* line 15, static_build/css/pebbles/base/elements/_lists.scss */
ul.prose {
  list-style: disc;
  margin-left: 30px; }
  /* line 19, static_build/css/pebbles/base/elements/_lists.scss */
  ul.prose ul {
    list-style: circle;
    margin-left: 20px;
    margin-bottom: 0; }
  /* line 25, static_build/css/pebbles/base/elements/_lists.scss */
  ul.prose ol {
    list-style: decimal;
    margin-left: 20px;
    margin-bottom: 0; }

/* line 32, static_build/css/pebbles/base/elements/_lists.scss */
ol.prose {
  list-style: decimal;
  margin-left: 30px; }
  /* line 36, static_build/css/pebbles/base/elements/_lists.scss */
  ol.prose ol {
    list-style: lower-alpha;
    margin-left: 20px;
    margin-bottom: 0; }
  /* line 42, static_build/css/pebbles/base/elements/_lists.scss */
  ol.prose ul {
    list-style: disc;
    margin-left: 20px;
    margin-bottom: 0; }

/* line 49, static_build/css/pebbles/base/elements/_lists.scss */
.prose li {
  margin-bottom: .25em; }

/* line 54, static_build/css/pebbles/base/elements/_lists.scss */
[dir='rtl'] ul.prose,
[dir='rtl'] ol.prose {
  margin-left: 0;
  margin-right: 30px; }
  /* line 59, static_build/css/pebbles/base/elements/_lists.scss */
  [dir='rtl'] ul.prose ul,
  [dir='rtl'] ul.prose ol,
  [dir='rtl'] ol.prose ul,
  [dir='rtl'] ol.prose ol {
    margin-left: 0;
    margin-right: 20px; }

/* line 68, static_build/css/pebbles/base/elements/_lists.scss */
dl.prose dt {
  font-weight: bold; }

/* line 71, static_build/css/pebbles/base/elements/_lists.scss */
dl.prose dd {
  margin-bottom: .25em;
  padding-left: 20px; }

/* line 11, static_build/css/pebbles/base/elements/_tables.scss */
.data-table {
  border-collapse: collapse;
  border-spacing: 0; }
  /* line 15, static_build/css/pebbles/base/elements/_tables.scss */
  .data-table caption {
    text-align: left;
    padding-bottom: 1px;
    /* fix to get it to look nice in many browsers */
    margin-bottom: -1px;
    width: 100%; }
  /* line 22, static_build/css/pebbles/base/elements/_tables.scss */
  .data-table th,
  .data-table td {
    border-top: 1px solid rgba(0, 0, 0, 0.2);
    padding: .5em 10px;
    text-align: left; }
  /* line 29, static_build/css/pebbles/base/elements/_tables.scss */
  .data-table thead th,
  .data-table thead td {
    border-top: 0;
    padding-top: 0; }

/* line 38, static_build/css/pebbles/base/elements/_tables.scss */
[dir='rtl'] .data-table caption,
[dir='rtl'] .data-table th,
[dir='rtl'] .data-table td {
  text-align: right; }

/* line 8, static_build/css/pebbles/base/elements/_forms.scss */
button,
input,
select,
textarea {
  font-family: "Open Sans", X-LocaleSpecific, sans-serif; }

/* line 15, static_build/css/pebbles/base/elements/_forms.scss */
textarea {
  height: auto;
  max-width: 100%; }

/* line 20, static_build/css/pebbles/base/elements/_forms.scss */
textarea,
input[type=email],
input[type=url],
input[type=tel],
input[type=password],
input[type=search],
input[type=text],
input[type=number],
input[type=date],
input[type=time] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
  background: #fff;
  border-radius: .3em;
  border: 1px solid #b2b2b2;
  display: inline-block;
  line-height: 1.25;
  padding: .25em 10px; }

/* line 40, static_build/css/pebbles/base/elements/_forms.scss */
textarea:focus,
input[type=email]:focus,
input[type=password]:focus,
input[type=search]:focus,
input[type=text]:focus,
input[type=tel]:focus,
input.focus {
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
  border-color: #42a4e0;
  box-shadow: 0 0 0 2px rgba(73, 173, 227, 0.4); }

/* line 52, static_build/css/pebbles/base/elements/_forms.scss */
select:focus {
  box-shadow: 0 0 0 2px rgba(73, 173, 227, 0.4); }

/* line 56, static_build/css/pebbles/base/elements/_forms.scss */
textarea:-moz-ui-invalid:not(output),
input[type=email]:-moz-ui-invalid:not(output),
input[type=password]:-moz-ui-invalid:not(output),
input[type=search]:-moz-ui-invalid:not(output),
input[type=text]:-moz-ui-invalid:not(output),
input[type=tel]:-moz-ui-invalid:not(output),
input.invalid {
  -webkit-transition: all 100ms linear;
  transition: all 100ms linear;
  border-color: #a91300;
  box-shadow: 0 0 0 2px rgba(255, 80, 80, 0.4); }

/* line 9, static_build/css/pebbles/components/_sections.scss */
.section,
.content {
  zoom: 1;
  position: relative; }
  /* line 16, static_build/css/pebbles/includes/_mixins.scss */
  .section:after,
  .content:after {
    clear: both;
    content: '';
    display: block;
    height: 0;
    visibility: hidden; }

/* line 15, static_build/css/pebbles/components/_sections.scss */
.content {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0 auto;
  padding: 20px;
  min-width: 300px; }
  @media screen and (min-width: 760px) {
    /* line 15, static_build/css/pebbles/components/_sections.scss */
    .content {
      width: 740px; } }
  @media screen and (min-width: 1000px) {
    /* line 15, static_build/css/pebbles/components/_sections.scss */
    .content {
      width: 980px; } }
  @media screen and (min-width: 1400px) {
    /* line 15, static_build/css/pebbles/components/_sections.scss */
    .content {
      width: 1380px; } }

/* line 8, static_build/css/pebbles/components/_tabzilla.scss */
#tabzilla {
  position: relative;
  float: right; }
  /* line 12, static_build/css/pebbles/components/_tabzilla.scss */
  #tabzilla a {
    background-image: url("../img/tabzilla-static.png");
    background-size: 147px 37px;
    overflow: hidden;
    text-indent: 120%;
    white-space: nowrap;
    background-repeat: no-repeat;
    display: block;
    height: 37px;
    position: relative;
    width: 147px;
    z-index: 2; }
    @media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 1.5dppx), only screen and (min-resolution: 144dpi) {
      /* line 12, static_build/css/pebbles/components/_tabzilla.scss */
      #tabzilla a {
        background-image: url("../img/tabzilla-static-high-res.png");
        background-size: 147px 37px; } }
  /* line 23, static_build/css/pebbles/components/_tabzilla.scss */
  #tabzilla:before {
    background-color: transparent;
    content: '';
    display: block;
    height: 26px;
    left: 28px;
    position: absolute;
    top: 0;
    width: 88px;
    z-index: 1; }

/* line 8, static_build/css/pebbles/components/_buttons.scss */
.button,
button.button,
a.button:link,
a.button:visited, .button.button-hollow,
button.button.button-hollow,
a.button.button-hollow:link,
a.button.button-hollow:visited,
button.form-button,
input.form-button[type="submit"],
input.form-button[type='button'] {
  font-size: 16px;
  font-size: 0.88889rem;
  font-family: "Open Sans", X-LocaleSpecific, sans-serif;
  background: none;
  border-radius: 2px;
  border-style: solid;
  border-width: 2px;
  cursor: pointer;
  display: inline-block;
  font-weight: bold;
  padding: .9em 40px;
  position: relative;
  text-align: center;
  text-decoration: none;
  text-shadow: none;
  transition: background-color .1s ease-in-out, border-color .1s ease-in-out; }
  /* line 25, static_build/css/pebbles/components/_buttons.scss */
  .button:active,
  a.button:active:link,
  a.button:active:visited,
  button.button.button-hollow:active,
  button.form-button:active,
  input.form-button:active[type="submit"],
  input.form-button:active[type='button'] {
    position: relative;
    top: 1px; }
  /* line 30, static_build/css/pebbles/components/_buttons.scss */
  .button:hover,
  a.button:hover:link,
  a.button:hover:visited,
  button.button.button-hollow:hover,
  button.form-button:hover,
  input.form-button:hover[type="submit"],
  input.form-button:hover[type='button'], .button:focus,
  a.button:focus:link,
  a.button:focus:visited,
  button.button.button-hollow:focus,
  button.form-button:focus,
  input.form-button:focus[type="submit"],
  input.form-button:focus[type='button'] {
    text-decoration: none; }

/* line 37, static_build/css/pebbles/components/_buttons.scss */
.button,
button.button,
a.button:link,
a.button:visited {
  background-color: #0060df;
  border-color: #0060df;
  color: #fff; }
  /* line 46, static_build/css/pebbles/components/_buttons.scss */
  .button:hover, .button:focus,
  button.button:hover,
  button.button:focus,
  a.button:link:hover,
  a.button:link:focus,
  a.button:visited:hover,
  a.button:visited:focus {
    background-color: #006bf9;
    border-color: #006bf9; }
  /* line 52, static_build/css/pebbles/components/_buttons.scss */
  .button.button-dark,
  button.button.button-dark,
  a.button:link.button-dark,
  a.button:visited.button-dark {
    background-color: #00539f;
    border-color: #00539f;
    color: #fff; }
    /* line 57, static_build/css/pebbles/components/_buttons.scss */
    .button.button-dark:hover, .button.button-dark:focus,
    button.button.button-dark:hover,
    button.button.button-dark:focus,
    a.button:link.button-dark:hover,
    a.button:link.button-dark:focus,
    a.button:visited.button-dark:hover,
    a.button:visited.button-dark:focus {
      background-color: #0060b9;
      border-color: #0060b9; }
  /* line 64, static_build/css/pebbles/components/_buttons.scss */
  .button.button-green,
  button.button.button-green,
  a.button:link.button-green,
  a.button:visited.button-green {
    background-color: #12bc00;
    border-color: #12bc00;
    color: #fff; }
    /* line 69, static_build/css/pebbles/components/_buttons.scss */
    .button.button-green:hover, .button.button-green:focus,
    button.button.button-green:hover,
    button.button.button-green:focus,
    a.button:link.button-green:hover,
    a.button:link.button-green:focus,
    a.button:visited.button-green:hover,
    a.button:visited.button-green:focus {
      background-color: #10a300;
      border-color: #10a300; }
  /* line 76, static_build/css/pebbles/components/_buttons.scss */
  .button.button-red,
  button.button.button-red,
  a.button:link.button-red,
  a.button:visited.button-red {
    background-color: #c13832;
    border-color: #c13832;
    color: #fff; }
    /* line 81, static_build/css/pebbles/components/_buttons.scss */
    .button.button-red:hover,
    button.button.button-red:hover,
    a.button:link.button-red:hover,
    a.button:visited.button-red:hover {
      background-color: #d93a33;
      border-color: #d93a33; }
  /* line 87, static_build/css/pebbles/components/_buttons.scss */
  .button.button-orange,
  button.button.button-orange,
  a.button:link.button-orange,
  a.button:visited.button-orange {
    background-color: #f26c23;
    border-color: #f16215;
    color: #fff; }
    /* line 92, static_build/css/pebbles/components/_buttons.scss */
    .button.button-orange:hover, .button.button-orange:focus,
    button.button.button-orange:hover,
    button.button.button-orange:focus,
    a.button:link.button-orange:hover,
    a.button:link.button-orange:focus,
    a.button:visited.button-orange:hover,
    a.button:visited.button-orange:focus {
      background-color: #fe7931;
      border-color: #fe7931; }

/* line 101, static_build/css/pebbles/components/_buttons.scss */
.button.button-hollow,
button.button.button-hollow,
a.button.button-hollow:link,
a.button.button-hollow:visited,
button.form-button,
input[type="submit"].form-button,
input[type='button'].form-button {
  background-color: transparent;
  border-color: #0060df;
  color: #0060df; }
  /* line 113, static_build/css/pebbles/components/_buttons.scss */
  .button.button-hollow:hover, .button.button-hollow:focus,
  button.button.button-hollow:hover,
  button.button.button-hollow:focus,
  a.button.button-hollow:link:hover,
  a.button.button-hollow:link:focus,
  a.button.button-hollow:visited:hover,
  a.button.button-hollow:visited:focus,
  button.form-button:hover,
  button.form-button:focus,
  input[type="submit"].form-button:hover,
  input[type="submit"].form-button:focus,
  input[type='button'].form-button:hover,
  input[type='button'].form-button:focus {
    background-color: rgba(0, 96, 223, 0.05);
    border-color: #006bf9;
    color: #006bf9; }
  /* line 120, static_build/css/pebbles/components/_buttons.scss */
  .button.button-hollow.button-light,
  button.button.button-hollow.button-light,
  a.button.button-hollow:link.button-light,
  a.button.button-hollow:visited.button-light,
  button.form-button.button-light,
  input[type="submit"].form-button.button-light,
  input[type='button'].form-button.button-light {
    color: #fff;
    border-color: #fff; }
    /* line 124, static_build/css/pebbles/components/_buttons.scss */
    .button.button-hollow.button-light:hover, .button.button-hollow.button-light:focus,
    button.button.button-hollow.button-light:hover,
    button.button.button-hollow.button-light:focus,
    a.button.button-hollow:link.button-light:hover,
    a.button.button-hollow:link.button-light:focus,
    a.button.button-hollow:visited.button-light:hover,
    a.button.button-hollow:visited.button-light:focus,
    button.form-button.button-light:hover,
    button.form-button.button-light:focus,
    input[type="submit"].form-button.button-light:hover,
    input[type="submit"].form-button.button-light:focus,
    input[type='button'].form-button.button-light:hover,
    input[type='button'].form-button.button-light:focus {
      background-color: rgba(255, 255, 255, 0.05);
      border-color: #f2f2f2;
      color: #f2f2f2; }
  /* line 132, static_build/css/pebbles/components/_buttons.scss */
  .button.button-hollow.button-dark,
  button.button.button-hollow.button-dark,
  a.button.button-hollow:link.button-dark,
  a.button.button-hollow:visited.button-dark,
  button.form-button.button-dark,
  input[type="submit"].form-button.button-dark,
  input[type='button'].form-button.button-dark {
    color: #00539f;
    border-color: #00539f; }
    /* line 136, static_build/css/pebbles/components/_buttons.scss */
    .button.button-hollow.button-dark:hover, .button.button-hollow.button-dark:focus,
    button.button.button-hollow.button-dark:hover,
    button.button.button-hollow.button-dark:focus,
    a.button.button-hollow:link.button-dark:hover,
    a.button.button-hollow:link.button-dark:focus,
    a.button.button-hollow:visited.button-dark:hover,
    a.button.button-hollow:visited.button-dark:focus,
    button.form-button.button-dark:hover,
    button.form-button.button-dark:focus,
    input[type="submit"].form-button.button-dark:hover,
    input[type="submit"].form-button.button-dark:focus,
    input[type='button'].form-button.button-dark:hover,
    input[type='button'].form-button.button-dark:focus {
      background-color: rgba(0, 83, 159, 0.05);
      border-color: #0060b9;
      color: #0060b9; }
  /* line 144, static_build/css/pebbles/components/_buttons.scss */
  .button.button-hollow.button-red,
  button.button.button-hollow.button-red,
  a.button.button-hollow:link.button-red,
  a.button.button-hollow:visited.button-red,
  button.form-button.button-red,
  input[type="submit"].form-button.button-red,
  input[type='button'].form-button.button-red {
    color: #c13832;
    border-color: #c13832; }
    /* line 148, static_build/css/pebbles/components/_buttons.scss */
    .button.button-hollow.button-red:hover, .button.button-hollow.button-red:focus,
    button.button.button-hollow.button-red:hover,
    button.button.button-hollow.button-red:focus,
    a.button.button-hollow:link.button-red:hover,
    a.button.button-hollow:link.button-red:focus,
    a.button.button-hollow:visited.button-red:hover,
    a.button.button-hollow:visited.button-red:focus,
    button.form-button.button-red:hover,
    button.form-button.button-red:focus,
    input[type="submit"].form-button.button-red:hover,
    input[type="submit"].form-button.button-red:focus,
    input[type='button'].form-button.button-red:hover,
    input[type='button'].form-button.button-red:focus {
      background-color: rgba(193, 56, 50, 0.05);
      border-color: #d93a33;
      color: #d93a33; }

/* line 157, static_build/css/pebbles/components/_buttons.scss */
#newsletter-form .form-button {
  width: 100%; }

/* line 9, static_build/css/pebbles/components/_buttons-download.scss */
.fx-privacy-link {
  font-size: 12px;
  font-size: 0.66667rem;
  font-family: "Open Sans", X-LocaleSpecific, sans-serif;
  display: block;
  text-align: center; }
  /* line 15, static_build/css/pebbles/components/_buttons-download.scss */
  .fx-privacy-link a:link,
  .fx-privacy-link a:visited {
    color: #fff;
    text-decoration: none; }
  /* line 21, static_build/css/pebbles/components/_buttons-download.scss */
  .fx-privacy-link a:hover,
  .fx-privacy-link a:active,
  .fx-privacy-link a:focus {
    text-decoration: underline; }

/* line 29, static_build/css/pebbles/components/_buttons-download.scss */
ul.download-list {
  list-style-type: none;
  margin-bottom: 10px; }
  /* line 33, static_build/css/pebbles/components/_buttons-download.scss */
  ul.download-list li {
    margin-left: 0; }
  /* line 37, static_build/css/pebbles/components/_buttons-download.scss */
  ul.download-list strong {
    font-weight: bold; }

/* line 43, static_build/css/pebbles/components/_buttons-download.scss */
.infobar a.button {
  font-size: 16px;
  font-size: 0.88889rem;
  margin-left: 20px;
  padding: 5px 18px; }

/* line 51, static_build/css/pebbles/components/_buttons-download.scss */
.download-dumb ul {
  list-style: none; }
  /* line 54, static_build/css/pebbles/components/_buttons-download.scss */
  .download-dumb ul li {
    display: inline-block;
    margin: 20px 0 0; }
    /* line 58, static_build/css/pebbles/components/_buttons-download.scss */
    .download-dumb ul li .button {
      font-size: 14px;
      font-size: 0.77778rem;
      margin-left: 3px;
      padding: 6px 10px; }

/* line 67, static_build/css/pebbles/components/_buttons-download.scss */
.download-button {
  display: inline-block;
  vertical-align: top; }

/* line 72, static_build/css/pebbles/components/_buttons-download.scss */
.download-other {
  font-size: 11px;
  font-size: 0.61111rem;
  font-family: "Open Sans", X-LocaleSpecific, sans-serif;
  color: #666; }
  /* line 77, static_build/css/pebbles/components/_buttons-download.scss */
  .download-other a:link,
  .download-other a:visited {
    color: #999; }
  /* line 82, static_build/css/pebbles/components/_buttons-download.scss */
  .download-other a:hover,
  .download-other a:focus,
  .download-other a:active {
    color: #999;
    text-decoration: underline; }

/* !important used for strict download link enforcement */
/* stylelint-disable declaration-no-important  */
/* line 95, static_build/css/pebbles/components/_buttons-download.scss */
.download-button .ios-download,
.download-button .linux-arm-download,
.download-button .unrecognized-download,
.download-button .unsupported-download,
.download-button .unsupported-download-osx,
.download-button .nojs-download {
  display: none; }

/* line 106, static_build/css/pebbles/components/_buttons-download.scss */
.download-button .os_win64,
.download-button .os_win64-msi,
.download-button .os_linux,
.download-button .os_linux64,
.android .download-button-desktop,
.windows.arm .download-button .os_win,
.linux.arm .download-button .os_linux,
.linux.x86.x64 .download-list .os_linux,
.download-button .os_win,
.download-button .os_win-msi,
.download-button .os_osx,
.download-button .os_android,
.download-button .os_ios,
.no-js .download-list,
.other .download-list {
  display: none !important; }

/* line 128, static_build/css/pebbles/components/_buttons-download.scss */
.linux .download-button .os_linux,
.linux.x86.x64 .download-button .os_linux64,
.windows .download-button .os_win,
.osx .download-button .os_osx,
.android .download-button .os_android,
.download-button-android .os_android,
.android .download-button-desktop .download-list,
.android .download-button-desktop small.os_win,
.download-button-ios .os_ios,
.ios .download-button .os_ios,
.ios .download-button .ios-download,
.ios .download-button-desktop .download-list,
.other .download-button-android .download-list,
.other .download-button small.os_win {
  display: block !important; }

/* line 145, static_build/css/pebbles/components/_buttons-download.scss */
.windows.arm .download-button .unsupported-download,
.linux.arm .download-button .linux-arm-download,
.oldwin .download-button .unsupported-download,
.oldmac .download-button .unsupported-download {
  display: block;
  max-width: 250px; }

/* line 154, static_build/css/pebbles/components/_buttons-download.scss */
.windows.arm .download-button .fx-privacy-link,
.linux.arm .download-button .fx-privacy-link,
.oldwin .download-button .fx-privacy-link,
.oldmac .download-button .fx-privacy-link {
  display: none; }

/* line 164, static_build/css/pebbles/components/_buttons-download.scss */
.android .download-button-desktop .nojs-download,
.ios .download-button-desktop .nojs-download,
.no-js .download-button .nojs-download {
  display: block; }

/* line 170, static_build/css/pebbles/components/_buttons-download.scss */
.other .download-button .unrecognized-download {
  display: block; }

/* line 176, static_build/css/pebbles/components/_buttons-download.scss */
.download-button .download-list .os_android.x86,
.download-button .download-other.os_android .arm,
.android.x86 .download-button .download-list .os_android.armv7up,
.android.x86 .download-button .download-other.os_android .x86 {
  display: none !important; }

/* line 183, static_build/css/pebbles/components/_buttons-download.scss */
.android.x86 .download-button .download-list .os_android.x86 {
  display: block !important; }

/* line 187, static_build/css/pebbles/components/_buttons-download.scss */
.android.x86 .download-button .download-other.os_android .armv7up {
  display: inline !important; }

/* stylelint-enable */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */



/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* line 10, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer {
  font-family: Inter, X-LocaleSpecific, sans-serif;
  background: #000000;
  clear: both;
  color: #ffffff;
  margin: 0;
  padding-top: 24px;
  width: 100%; }
  /* line 19, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer a:link,
  .mzp-c-footer a:visited {
    color: #ffffff;
    font-weight: normal;
    text-decoration: underline; }
  /* line 26, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer a:hover,
  .mzp-c-footer a:focus,
  .mzp-c-footer a:active {
    color: #ffffff;
    text-decoration: none; }

/* -------------------------------------------------------------------------- */
/* line 38, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-primary {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  zoom: 1;
  margin: 0 auto 48px; }
  /* line 19, static_build/protocol/css/includes/_mixins.scss */
  .mzp-c-footer-primary:after {
    clear: both;
    content: '';
    display: block;
    height: 0;
    visibility: hidden; }
  @media screen and (min-width: 1056px) {
    /* line 38, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-primary {
      margin-bottom: 32px; } }

/* -------------------------------------------------------------------------- */
/* line 52, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-primary-logo {
  margin-bottom: 32px; }
  /* line 55, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-primary-logo a {
    background: url("/media/protocol/img/logos/mozilla/white.svg") no-repeat;
    -webkit-background-size: 100px, 32px;
    background-size: 100px, 32px;
    overflow: hidden;
    text-indent: 120%;
    white-space: nowrap;
    display: inline-block;
    height: 32px;
    width: 100px; }

/* -------------------------------------------------------------------------- */
/* line 69, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-sections {
  zoom: 1; }
  /* line 19, static_build/protocol/css/includes/_mixins.scss */
  .mzp-c-footer-sections:after {
    clear: both;
    content: '';
    display: block;
    height: 0;
    visibility: hidden; }
  @media screen and (min-width: 768px) {
    /* line 69, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-sections {
      border-bottom: 1px solid #42425a;
      padding-bottom: 64px; } }
  @media screen and (min-width: 1056px) {
    /* line 69, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-sections {
      padding-bottom: 48px; } }

/* line 82, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-section {
  zoom: 1;
  margin-bottom: 8px; }
  /* line 19, static_build/protocol/css/includes/_mixins.scss */
  .mzp-c-footer-section:after {
    clear: both;
    content: '';
    display: block;
    height: 0;
    visibility: hidden; }
  /* line 86, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section a:link,
  .mzp-c-footer-section a:visited {
    text-decoration: none; }
  /* line 91, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section a:hover,
  .mzp-c-footer-section a:focus,
  .mzp-c-footer-section a:active {
    text-decoration: underline; }
  @media (min-width: 480px) and (max-width: 1055px) {
    /* line 82, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-section {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
      width: 50%; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-section {
        float: left; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-section {
        float: right; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-section:nth-child(odd) {
        clear: left; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-section:nth-child(odd) {
        clear: right; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-section:nth-child(odd) {
        padding: 0 24px 0 0; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-section:nth-child(odd) {
        padding: 0 0 0 24px; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-section:nth-child(even) {
        padding: 0 0 0 24px; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-section:nth-child(even) {
        padding: 0 24px 0 0; } }

@media screen and (min-width: 1056px) {
  /* line 114, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section {
    padding: 0 24px; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-section {
      float: left; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-section {
      float: right; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-section:first-child {
      padding: 0 24px 0 0; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-section:first-child {
      padding: 0 0 0 24px; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-section:last-child {
      padding: 0 0 0 24px; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-section:last-child {
      padding: 0 24px 0 0; }
  /* line 130, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section:first-child:nth-last-child(n+2),
  .mzp-c-footer-section:first-child:nth-last-child(n+2) ~ .mzp-c-footer-section:nth-child(1n-1) {
    width: calc(50% - (48px - (48px / 2))); }
  /* line 130, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section:first-child:nth-last-child(n+3),
  .mzp-c-footer-section:first-child:nth-last-child(n+3) ~ .mzp-c-footer-section:nth-child(1n-1) {
    width: calc(33.33333% - (48px - (48px / 3))); }
  /* line 130, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section:first-child:nth-last-child(n+4),
  .mzp-c-footer-section:first-child:nth-last-child(n+4) ~ .mzp-c-footer-section:nth-child(1n-1) {
    width: calc(25% - (48px - (48px / 4))); }
  /* line 130, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section:first-child:nth-last-child(n+5),
  .mzp-c-footer-section:first-child:nth-last-child(n+5) ~ .mzp-c-footer-section:nth-child(1n-1) {
    width: calc(20% - (48px - (48px / 5))); }
  /* line 130, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-section:first-child:nth-last-child(n+6),
  .mzp-c-footer-section:first-child:nth-last-child(n+6) ~ .mzp-c-footer-section:nth-child(1n-1) {
    width: calc(16.66667% - (48px - (48px / 6))); } }

/* line 138, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-heading,
.mzp-c-footer-heading button {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
  background-color: transparent;
  border-bottom: 1px solid #42425a;
  border: 0;
  color: inherit;
  margin-bottom: 0;
  padding: 16px 0;
  position: relative;
  width: 100%; }
  /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
  .mzp-c-footer-heading,
  .mzp-c-footer-heading button {
    text-align: left; }
  /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
  [dir='rtl'] .mzp-c-footer-heading, [dir='rtl']
  .mzp-c-footer-heading button {
    text-align: right; }

/* line 152, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-heading.is-summary {
  padding: 0;
  border-bottom: 0; }
  /* line 156, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-heading.is-summary button:focus {
    outline: 1px dotted #fff; }
  /* line 160, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-heading.is-summary button:before {
    background: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg stroke='%23FFF' stroke-width='2' fill='none' fill-rule='evenodd' stroke-linecap='round'%3E%3Cpath d='M12 3.515v16.97M3.515 12h16.97'/%3E%3C/g%3E%3C/svg%3E") top left no-repeat;
    -webkit-background-size: 24px, 24px;
    background-size: 24px, 24px;
    -webkit-transition: transform 100ms ease-in-out;
    transition: transform 100ms ease-in-out;
    content: '';
    height: 24px;
    margin-top: -12px;
    position: absolute;
    top: 50%;
    width: 24px; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-heading.is-summary button:before {
      right: 8px; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-heading.is-summary button:before {
      right: auto;
      left: 8px; }
  /* line 173, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-heading.is-summary button[aria-expanded=true]:before {
    -webkit-transform: rotate(45deg);
    transform: rotate(45deg); }

/* line 178, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-heading a:link,
.mzp-c-footer-heading a:visited {
  font-weight: bold; }

@media screen and (min-width: 768px) {
  /* line 137, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-heading {
    border-bottom: 0;
    padding: 8px 0; } }

/* line 189, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-list {
  margin-bottom: 32px; }
  /* line 192, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-list li {
    list-style-type: none;
    padding: 4px 0; }
    /* line 196, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-list li:first-child {
      margin-top: 8px; }
      @media screen and (min-width: 768px) {
        /* line 196, static_build/protocol/css/components/_footer.scss */
        .mzp-c-footer-list li:first-child {
          margin-top: 0; } }
  /* line 205, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-list.is-closed[aria-hidden="true"] {
    display: none; }

/* -------------------------------------------------------------------------- */
/* line 215, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-secondary {
  font-size: 12px;
  font-size: 0.75rem;
  line-height: 1.5;
  position: relative; }

/* -------------------------------------------------------------------------- */
/* line 223, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-language {
  zoom: 1;
  margin-bottom: 24px; }
  /* line 19, static_build/protocol/css/includes/_mixins.scss */
  .mzp-c-footer-language:after {
    clear: both;
    content: '';
    display: block;
    height: 0;
    visibility: hidden; }
  @media screen and (min-width: 768px) {
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-language {
      float: right; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-language {
      float: left; } }

/* -------------------------------------------------------------------------- */
/* line 235, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-links-social {
  margin-bottom: 48px; }
  /* line 238, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-links-social li {
    display: inline-block;
    vertical-align: bottom; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-footer-links-social li {
      margin: 0 16px 0 0; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-footer-links-social li {
      margin: 0 0 0 16px; }
    /* line 243, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-links-social li a {
      overflow: hidden;
      text-indent: 120%;
      white-space: nowrap;
      background-repeat: no-repeat;
      border-bottom: 1px solid transparent;
      display: block;
      height: 16px;
      width: 16px; }
      /* line 251, static_build/protocol/css/components/_footer.scss */
      .mzp-c-footer-links-social li a.twitter {
        background-image: url("/media/protocol/img/icons/social/twitter/white.svg"); }
      /* line 255, static_build/protocol/css/components/_footer.scss */
      .mzp-c-footer-links-social li a.instagram {
        background-image: url("/media/protocol/img/icons/social/instagram/white.svg"); }
      /* line 259, static_build/protocol/css/components/_footer.scss */
      .mzp-c-footer-links-social li a.youtube {
        background-image: url("/media/protocol/img/icons/social/youtube/white.svg"); }
      /* line 263, static_build/protocol/css/components/_footer.scss */
      .mzp-c-footer-links-social li a:hover, .mzp-c-footer-links-social li a:focus {
        border-bottom-color: #ffffff; }
  @media screen and (min-width: 768px) {
    /* line 235, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-links-social {
      bottom: 0;
      margin-bottom: 0;
      max-width: 33%;
      position: absolute; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-links-social {
        right: 0; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-links-social {
        right: auto;
        left: 0; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-links-social {
        text-align: right; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-links-social {
        text-align: left; }
      /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
      .mzp-c-footer-links-social li {
        padding: 0 0 16px 24px;
        margin: 0; }
      /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
      [dir='rtl'] .mzp-c-footer-links-social li {
        padding: 0 24px 16px 0;
        margin: 0; } }

/* -------------------------------------------------------------------------- */
/* line 293, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-legal li {
  display: inline-block; }
  /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
  .mzp-c-footer-legal li {
    padding: 0 24px 16px 0; }
  /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
  [dir='rtl'] .mzp-c-footer-legal li {
    padding: 0 0 16px 24px; }
  /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
  .mzp-c-footer-legal li:last-child {
    padding-right: 0; }
  /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
  [dir='rtl'] .mzp-c-footer-legal li:last-child {
    padding-right: 0;
    padding-left: 0; }

/* -------------------------------------------------------------------------- */
/* line 307, static_build/protocol/css/components/_footer.scss */
.mzp-c-footer-license {
  margin-bottom: 32px; }
  @media screen and (min-width: 768px) {
    /* line 307, static_build/protocol/css/components/_footer.scss */
    .mzp-c-footer-license {
      max-width: 66%; } }

/* -------------------------------------------------------------------------- */
@media screen and (min-width: 768px) {
  /* line 319, static_build/protocol/css/components/_footer.scss */
  .mzp-c-footer-terms {
    max-width: 66%; } }

/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* line 7, static_build/protocol/css/components/_language-switcher.scss */
.mzp-c-language-switcher {
  color: inherit;
  font-weight: bold; }
  /* line 11, static_build/protocol/css/components/_language-switcher.scss */
  .mzp-c-language-switcher label,
  .mzp-c-language-switcher .mzp-c-language-switcher-link {
    font-size: 14px;
    font-size: 0.875rem;
    line-height: 1.5;
    display: inline-block; }
    /* line 46, static_build/protocol/css/includes/mixins/_bidi.scss */
    .mzp-c-language-switcher label,
    .mzp-c-language-switcher .mzp-c-language-switcher-link {
      margin: 0 24px 8px 0; }
    /* line 62, static_build/protocol/css/includes/mixins/_bidi.scss */
    [dir='rtl'] .mzp-c-language-switcher label, [dir='rtl']
    .mzp-c-language-switcher .mzp-c-language-switcher-link {
      margin: 0 0 8px 24px; }
  /* line 19, static_build/protocol/css/components/_language-switcher.scss */
  .mzp-c-language-switcher .mzp-c-language-switcher-link + label {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    /* !important required to ensure element is hidden when mixin is applied */
    position: absolute !important;
    /* stylelint-disable-line declaration-no-important */
    width: 1px; }
  /* line 23, static_build/protocol/css/components/_language-switcher.scss */
  .mzp-c-language-switcher select {
    font-size: 12px;
    font-size: 0.75rem;
    line-height: 1.5;
    border: none;
    background: #ededf0; }
  /* line 29, static_build/protocol/css/components/_language-switcher.scss */
  .mzp-c-language-switcher button {
    font-size: 14px;
    font-size: 0.875rem;
    line-height: 1.5;
    margin-top: 8px; }
  /* line 35, static_build/protocol/css/components/_language-switcher.scss */
  .js .mzp-c-language-switcher button {
    display: none; }

/**
 * Pebbles specific overrides for Protocol Footer component.
 * 1. Pebbles pages use Zilla for body copy, so override in the footer.
 * 2. Because of 1, pages also set a base font-size of 112.5% on <html>, so compensate proportionally.
 */
/* line 22, static_build/css/pebbles/components/_protocol-footer.scss */
.mzp-c-footer .mzp-l-content {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0 auto;
  padding: 20px; }
  @media screen and (min-width: 760px) {
    /* line 22, static_build/css/pebbles/components/_protocol-footer.scss */
    .mzp-c-footer .mzp-l-content {
      padding: 20px 60px; } }
  @media screen and (min-width: 1000px) {
    /* line 22, static_build/css/pebbles/components/_protocol-footer.scss */
    .mzp-c-footer .mzp-l-content {
      padding: 20px 85px; } }
  @media screen and (min-width: 1400px) {
    /* line 22, static_build/css/pebbles/components/_protocol-footer.scss */
    .mzp-c-footer .mzp-l-content {
      max-width: 1420px; } }

/* line 40, static_build/css/pebbles/components/_protocol-footer.scss */
.mzp-c-footer .mzp-c-footer-heading {
  font-size: 16px;
  font-size: 0.88889rem;
  font-weight: bold; }

/* line 45, static_build/css/pebbles/components/_protocol-footer.scss */
.mzp-c-footer .mzp-c-footer-primary {
  font-size: 16px;
  font-size: 0.88889rem; }

/* line 49, static_build/css/pebbles/components/_protocol-footer.scss */
.mzp-c-footer .mzp-c-footer-secondary {
  font-size: 12px;
  font-size: 0.66667rem; }

/* line 56, static_build/css/pebbles/components/_protocol-footer.scss */
.mzp-c-footer-links-social li a {
  background-repeat: no-repeat; }

/* line 7, static_build/css/pebbles/protocol-footer.scss */
.mzp-c-footer.mzp-t-firefox {
  background-color: #20123a; }
  /* line 10, static_build/css/pebbles/protocol-footer.scss */
  .mzp-c-footer.mzp-t-firefox .mzp-c-footer-sections {
    padding-top: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
